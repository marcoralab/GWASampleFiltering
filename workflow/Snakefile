'''Snakefile for GWAS Variant and Sample QC'''

version_ = "0.4.2"

import os
import warnings


configfile: "config/config.yaml"
config['full_pipeline'] = True
config['king'] = True
config['relatedness_preexclude'] = 'relatedness_preexclude' in config and config['relatedness_preexclude']

shell.executable("/bin/bash")

BPLINK = ["bed", "bim", "fam"]
RWD = os.getcwd()


def apply_prefix(path):
    return workflow.modifier.path_modifier.modify(path)


if 'is_module' in config and config['is_module']:
    start = config['start']
    SAMPLE = config['SAMPLE']
    DATAOUT = config['DATAOUT']
else:
    from scripts.parse_config_GWASampleFiltering import parser
    start, SAMPLE, DATAOUT = parser(config)


FAMILY = 'T' if config['family'] else 'F'
istg = config['isTG'] if 'isTG' in config else False


def enableqc(qc_type):
    if 'qc' in config:
        if (isinstance(config['qc'], list)
                and all([isinstance(x, str) for x in config['qc']])):
            return qc_type in config['qc']
        elif isinstance(config['qc'], dict):
            if (qc_type in config['qc']
                    and isinstance(config['qc'][qc_type], bool)):
                return config['qc'][qc_type]
            else:
                raise Exception(
                    "Malformed QC dict: All supported QC must be present")
        else:
            raise Exception("Malformed QC list: Please provide dict OR list")
    else:
        return True


qc_type = ['variant', 'callrate', 'sex', 'heterozygosity',
           'relatedness', 'ancestry', 'popstrat']
qc_type = {x: enableqc(x) for x in qc_type}

def flatten(nested):
    flat = []
    for el in nested:
        if not isinstance(el, list):
            flat.append(el)
        else:
            flat += flatten(el)
    return flat


outs = {
    "report": expand("{dataout}/stats/{sample}_GWAS_QC.html", sample=SAMPLE, dataout = DATAOUT),
    "exclusions": expand("{dataout}/{sample}_exclude.samples", sample=SAMPLE, dataout = DATAOUT),
    "filtered": expand("{dataout}/{sample}_Excluded.{ext}",
                       sample=SAMPLE, ext=BPLINK, dataout = DATAOUT)}

outputs = [outs[x] for x in config["outputs"]]
outputs = flatten(outputs)

wildcard_constraints:
    dataout = DATAOUT

rule all:
    input:
        outputs

relatedness_included = False

if qc_type['variant'] or qc_type['callrate']:
    if qc_type['callrate'] and not qc_type['variant']:
        raise Exception("Sample call-rate QC cannot be run without variant QC")
    include: 'rules/variant_qc.smk'

if qc_type['callrate']:
    sampleqc_in_plink = rules.sample_callRate.output[0]
    sampleqc_in_plink_stem = "{dataout}/{sample}_callRate"
elif qc_type['variant']:
    sampleqc_in_plink = expand("{{dataout}}/{{sample}}_SnpQc.{ext}", ext=BPLINK)
    sampleqc_in_plink_stem = "{dataout}/{sample}_SnpQc"
else:
    sampleqc_in_plink = start['files']
    sampleqc_in_plink_stem = start['stem']

if qc_type['ancestry']:
    include: 'rules/ancestry.smk'

if qc_type['popstrat']:
    if config['pcair']:
        if not qc_type['relatedness']:
            warnings.warn("PCAiR requires relatedness QC. Enabling.")
            qc_type['relatedness'] = True
        include: 'rules/relatedness.smk'
        relatedness_included = True
    include: 'rules/stratification.smk'

if qc_type['relatedness'] and not relatedness_included:
    include: 'rules/relatedness.smk'
    relatedness_included = True

# ---- Exclude Samples with discordant sex ----
#  Use ADNI hg18 data, as the liftover removed the x chromsome data


rule sexcheck_QC:
    input: start['sex']
    output:
        "{dataout}/{sample}_SexQC.sexcheck"
    params:
        indat = apply_prefix(start['sex_stem']),
        out = apply_prefix("{dataout}/{sample}_SexQC"),
    resources:
        mem_mb = 10000,
        time_min = 30
    conda: "envs/plink.yaml"
    shell:
        '''
plink --keep-allele-order --bfile {params.indat} \
  --check-sex --aec --out {params.out}
'''

rule sex_sample_fail:
    input: "{dataout}/{sample}_SexQC.sexcheck"
    output: "{dataout}/{sample}_exclude.sexcheck"
    resources:
        mem_mb = 10000,
        time_min = 30
    container: 'docker://befh/r_env_gwasamplefilt:5'
    script: 'scripts/sexcheck_QC.R'


# ---- Exclude Samples with outlying heterozigosity ----
if 'unimputed_module' in config and config['is_module']:
    het_in_plink = start['files']
    het_in_plink_stem = start['stem']
else:
    het_in_plink = sampleqc_in_plink
    het_in_plink_stem = sampleqc_in_plink_stem

rule heterozygosity_QC:
    input: het_in_plink
    output: "{dataout}/{sample}_HetQC.het"
    params:
        indat_plink = apply_prefix(het_in_plink_stem),
        out = apply_prefix("{dataout}/{sample}_HetQC")
    resources:
        mem_mb = 10000,
        time_min = 30
    conda: "envs/plink.yaml"
    shell: "plink --keep-allele-order --bfile {params.indat_plink} --het --out {params.out}"

rule heterozygosity_sample_fail:
    input: "{dataout}/{sample}_HetQC.het"
    output: "{dataout}/{sample}_exclude.heterozigosity"
    resources:
        mem_mb = 10000,
        time_min = 30
    container: 'docker://befh/r_env_gwasamplefilt:5'
    script: 'scripts/heterozygosity_QC.R'


rule SampleExclusion:
    input:
        SampCallRate = "{dataout}/{sample}_callRate.irem" if qc_type['callrate'] else ancient('/dev/null'),
        het = "{dataout}/{sample}_exclude.heterozigosity" if qc_type['heterozygosity'] else ancient('/dev/null'),
        sex = "{dataout}/{sample}_exclude.sexcheck" if qc_type['sex'] else ancient('/dev/null'),
        pca = "{dataout}/{sample}_exclude.pca" if qc_type['ancestry'] else ancient('/dev/null'),
        relat = "{dataout}/{sample}_exclude.relatedness" if qc_type['relatedness'] else ancient('/dev/null')
    output:
        out = "{dataout}/{sample}_exclude.samples",
        out_distinct = "{dataout}/{sample}_exclude.distinct_samples"
    resources:
        mem_mb = 10000,
        time_min = 30
    container: 'docker://befh/r_env_gwasamplefilt:5'
    script: "scripts/sample_QC.R"

rule Exclude_failed:
    input:
        plink = sampleqc_in_plink,
        indat_exclude = rules.SampleExclusion.output.out_distinct
    output:
        temp(expand("{{dataout}}/{{sample}}_Excluded.{ext}", ext=BPLINK)),
        excl = temp('{dataout}/{sample}_exclude.plink')
    params:
        indat_plink = apply_prefix(sampleqc_in_plink_stem),
        out = apply_prefix("{dataout}/{sample}_Excluded")
    resources:
        mem_mb = 10000,
        time_min = 30
    conda: "envs/plink.yaml"
    shell:
        '''
cat {input.indat_exclude} | sed '1d' | cut -d' ' -f1,2 > {output.excl}
plink --keep-allele-order --bfile {params.indat_plink} --remove {output.excl} \
--make-bed --out {params.out}
'''

rule GWAS_QC_Report:
    input:
        SexFile = "{dataout}/{sample}_SexQC.sexcheck" if qc_type['sex'] else ancient('/dev/null'),
        hwe = "{dataout}/{sample}_SnpQc.hwe" if qc_type['variant'] else ancient('/dev/null'),
        frq = "{dataout}/{sample}_SnpQc.frq" if qc_type['variant'] else ancient('/dev/null'),
        frqx = "{dataout}/{sample}_SnpQc.frqx" if qc_type['variant'] else ancient('/dev/null'),
        imiss = "{dataout}/{sample}_imiss_callRate.imiss" if qc_type['callrate'] else ancient('/dev/null'),
        HetFile = "{dataout}/{sample}_HetQC.het" if qc_type['heterozygosity'] else ancient('/dev/null'),
        IBD_stats = "{dataout}/{sample}_IBDQC.Rdata" if qc_type['relatedness'] else ancient('/dev/null'),
        PCA_rdat = "{dataout}/{sample}_pca.Rdata" if qc_type['ancestry'] else ancient('/dev/null'),
        cluster_pops = "{dataout}/{sample}_cluster_pops.tsv" if qc_type['ancestry'] else ancient('/dev/null'),
        PopStrat_eigenval = "{dataout}/{sample}_filtered_PCA.eigenval" if qc_type['popstrat'] else ancient('/dev/null'),
        PopStrat_eigenvec = "{dataout}/{sample}_filtered_PCA.eigenvec" if qc_type['popstrat'] else ancient('/dev/null'),
        partmethod = rules.PCAPartitioning.output[1] if qc_type['popstrat'] and config["pcair"] else ancient('/dev/null'),
        tgpops = workflow.current_basedir.path + '/../resources/tg_subpops.tsv' # workflow.source_path('../resources/tg_subpops.tsv')
    output:
         "{dataout}/stats/{sample}_GWAS_QC.html"
    params:
        rwd = RWD,
        Family = FAMILY,
        pi_threshold = 0.1875,
        output_dir = "{dataout}/stats",
        idir = "{dataout}/stats/md/{sample}",
        geno_miss = config['QC']['GenoMiss'],
        samp_miss = config['QC']['SampMiss'],
        MAF = config['QC']['MAF'],
        HWE = config['QC']['HWE'],
        superpop = config['superpop'],
        partmethod = rules.PCAPartitioning.output[1] if qc_type['popstrat'] and config["pcair"] else "none",
        pipeline_version = version_
    threads: 17
    resources:
        mem_mb = 8000,
        walltime = '24:00'
    container: 'docker://befh/r_env_gwasamplefilt:5'
    script: "scripts/GWAS_QC.Rmd"
